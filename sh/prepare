#!/usr/bin/env -S node --experimental-detect-module
import { exec } from "node:child_process";
import fs from "node:fs/promises";
import path from "node:path";
import process from "node:process";
import { promisify } from "node:util";

import { Command } from "commander";

const program = new Command();

program
  .name("pre-package")
  .description("Prepare the package.json file for packaging")
  .option(
    "-m, --mode <mode>",
    "Set the mode (development or production)",
    process.env.NODE_ENV || "production",
  )
  .option(
    "-d, --dir <path>",
    "Specify directory where package.json file can be found",
    process.cwd(),
  )
  .helpOption("-h, --help", "Show this help screen")
  .addHelpText(
    "after",
    `
Examples:
  pre-package -m development
  pre-package --mode production
  `,
  );

program.parse(process.argv);

const options = program.opts();
const mode = options.mode;
const directory = options.dir;

if (mode !== "development" && mode !== "production") {
  console.error("Error: Invalid mode. Use 'development' or 'production'.");
  program.help({ error: true });
  process.exit(1);
}

const packageJsonPath = path.join(directory, "package.json");
let pkgj;
try {
  pkgj = JSON.parse(await fs.readFile(packageJsonPath, "utf-8"));
} catch (error) {
  console.error("Error: package.json file not found");
  process.exit(1);
}

if (mode === "production") {
  delete pkgj.devDependencies;
  delete pkgj.scripts;
  pkgj.types = "dist/index.d.ts";
  pkgj.main = "dist/index.cjs.js";
  pkgj.module = "dist/index.esm.js";
  fs.writeFile(packageJsonPath, JSON.stringify(pkgj, null, 2));
} else {
  await promisify(exec)(`git restore ${packageJsonPath}`);
}
